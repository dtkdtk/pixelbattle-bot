const PixelCommand = require('../structures/PixelCommand');
const BansManager = require('../managers/BansManager');
const { EmbedBuilder } = require('discord.js');
const { ms } = require('../utils/PixelFunctions');
const fetch = require('node-fetch');

class TokenCommand extends PixelCommand {
    constructor() {
        super('token', {
            cooldown: 3,
            aliases: ['t']
        });
    }

    async run(message, args) {
        if(!message.client.moderators.has(message.author.id)) 
            return message.reply({ content: '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!' });

        switch(args[0]) {
            case 'ban':
            case 'unban': {
                const manager = new BansManager(message.client);
                const action = (args[0] == 'unban') ? false : true;
                const user = message.mentions.users.first() || message.client.users.cache.get(args[action ? 2 : 1]) || await message.client.users.fetch(args[action ? 2 : 1]).catch(() => {});

                if(action) { 
                    var time = args[1];
                    if(!ms(time)) 
                        { message.reply({ content: '–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–Ω–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä \`28d\`' }); break; };
                    if(!ms(time) || ms(time) > ms('2000d') || ms(time) < ms('1s')) 
                        { message.reply({ content: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–Ω–∞ - 1 —Å–µ–∫—É–Ω–¥–∞, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è - 2000 –¥–Ω–µ–π' }); break; };

                    time = ms(time);
                }

                if(!user) 
                    { message.reply({ content: '–£–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∞–º–∏ –∏–≥—Ä–æ–∫ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω' }); break; };
                if(message.client.moderators.has(user.id) && (message.author.id !== message.client.config.owner)) 
                    { message.reply({ content: `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º` }); break; };

                const reason = args.slice(action ? 3 : 2).join(' ') || null;
                const assumption = await manager.find({ userID: user.id });
                if(action ? assumption : !assumption) 
                    { message.reply({ content: `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ ${action ? '–∑–∞–±–∞–Ω–∏—Ç—å' : '—Ä–∞–∑–±–∞–Ω–∏—Ç—å'} —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ ${action ? '' : '–Ω–µ '}–≤ –±–∞–Ω–µ` }); break; };

                const msg = await message.reply({ content: '–ü—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–µ—Ä–≤–µ—Ä–µ Pixel Battle...' });

                fetch(`${message.client.config.api_domain}/bans/${user.id}/edit`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        token: message.client.config.insideToken, 
                        action
                    })
                });

                switch(action) {
                    case true:
                        await manager.create({
                            userID: user.id,
                            moderatorID: message.author.id,
                            timeout: Date.now() + time,
                            reason
                        });
                        break;

                    case false:
                        await manager.delete({
                            userID: user.id
                        });
                        break;
                }

                msg.edit({
                    content: null,
                    embeds: [
                        new EmbedBuilder()
                        .setTitle(`ü¶ú | –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–¥–∞—á–µ ${action ? '–±–∞–Ω–∞' : '—Ä–∞–∑–±–∞–Ω–∞'}`)
                        .setColor(0x5865F2)
                        .setDescription(
                            `> –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: \`${message.author.globalName || message.author.username} (${message.author.id})\`\n` +
                            `> ${action ? '–ó–∞–±–∞–Ω–∏–ª' : '–†–∞–∑–±–∞–Ω–∏–ª'}: \`${user.globalName || user.username} (${user.id})\`\n` +
                            `> –ü–æ –ø—Ä–∏—á–∏–Ω–µ: \`${reason || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\`\n` +
                            `${action ? `> –ë–∞–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç: <t:${Math.floor((Date.now() + time) / 1000)}>` : ''}`
                        )
                        .addFields(
                            [
                                { 
                                    name: '–ù–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å —Ä–µ—à–µ–Ω–∏–µ–º?',
                                    value: '–î–ª—è –≤–∞—Å –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç –∫–∞–Ω–∞–ª <#969995793111064598>, –∞ –∏–º–µ–Ω–Ω–æ —Ä–∞–∑–¥–µ–ª –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±'
                                }
                            ]
                        )
                        .setTimestamp()
                    ]
                }).catch();

                break;
            }

            case 'regenerate':
            case 'regen':
            case 'r': {
                if(!message.client.config.owner.includes(message.author.id)) return message.react('‚ùå');

                const user = message.mentions.users.first() || message.client.users.cache.get(args[1]) || await message.client.users.fetch(args[1]).catch(() => {});
                if(!user) 
                    { message.reply({ content: `–£–∫–∞–∂–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞` }); break; };

                const data = await message.client.database.collection('users').findOne({ userID: user.id }, { projection: { _id: 0, token: 1 } });
                if(!data) { message.reply({ content: `–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–∏ –æ –¥–∞–Ω–Ω–æ–º –∏–≥—Ä–æ–∫–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö` }); break; };

                message.client.database.collection('users').updateOne({ userID: user.id },
                    {
                        $set: {
                            token: message.client.functions.generateToken(parseInt(data.token.split('.')[1], 36)), 
                        }
                    }
                );

                message.reply({ content: `–¢–æ–∫–µ–Ω –∏–≥—Ä–æ–∫–∞ ${`${user.globalName ?? user.username ?? user.tag} (**${user.id}**)`} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!` });

                break;
            }

            default: {
                message.reply({ content: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ ban/unban/regenerate' })
                break;
            }
        }
        
        return;
    }
}

module.exports = TokenCommand;