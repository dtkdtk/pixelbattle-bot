const PixelCommand = require('../structures/PixelCommand');
const { EmbedBuilder } = require('discord.js');

class PointsCommand extends PixelCommand {
    constructor() {
        super('points', {
            cooldown: 3,
            aliases: ['point', 'marks', 'mark']
        });
    }

    async run(message, args) {
        switch(args[0]) {
            case 'edit':
            case 'change': {
                if(!message.client.permissions.special.includes(message.author.id))
                    { message.react('‚ùå'); break; }

                const change = Number(args[1]);
                if(isNaN(change)) 
                    { message.reply({ content: '–ö–∞–∫ –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç —É–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ –±–∞–ª–ª–æ–≤' }); break; }
                if(!Number.isInteger(change)) 
                    { message.reply({ content: '–ö–∞–∫ –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç —É–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ –±–∞–ª–ª–æ–≤' }); break; }

                const target = message.mentions.members?.first() || message.guild.members.cache.get(args[2]);
                if(!target) 
                    { message.reply({ content: '–£–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∞–º–∏ –∏–≥—Ä–æ–∫ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω' }); break; }

                await message.client.points.updatePoints(target.id, change);
                message.reply({ content: `–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞ **${change}** –±–∞–ª–ª—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${target.nickname || target.user.globalName || target.user.username} (**${target.id}**)` });
                break;
            }

            case 'leaderboard':
            case 'leaders':
            case 'leader': {
                const msg = await message.reply({ content: '–ò–¥—ë—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤...' });
                let users = await message.client.database.collection('users').find({}, { userID: 1, username: 1, points: 1 }).toArray();
                users = users.filter(u => u.points !== 0);

                let i = 1;
                msg.edit({
                    content: null,
                    embeds: [
                        new EmbedBuilder()
                        .setTitle('–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤')
                        .setColor(0x5865F2)
                        .setDescription(
                            `\`–ü–æ–∑–∏—Ü–∏—è –≤ —Ç–æ–ø–µ\`. \`–ò–≥—Ä–æ–∫\` - \`–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤\`\n` +
                            users.sort((x, y) => y.points - x.points).map((u) => `${i++}. <@${u.userID}> - ${u.points}`).join('\n')
                        )
                        .setFooter({ text: '–ë–æ–ª—å—à–µ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤ - –±–æ–ª—å—à–µ –≤–∫–ª–∞–¥ –≤ –ø—Ä–æ–µ–∫—Ç' })
                        .setTimestamp()
                    ]
                });
                break;
            } // need pages with buttons (components)

            default: {
                const target = message.mentions.members?.first() || message.guild.members.cache.get(args[0]) || message.member;
                const data = await message.client.database.collection('users').findOne({ userID: target.id });

                message.reply({
                    embeds: [
                        new EmbedBuilder()
                        .setTitle(`üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ ${message.member.equals(target) ? '–≤–∞—à–∏—Ö –±–∞–ª–ª–∞—Ö' : `–±–∞–ª–ª–∞—Ö ${target.nickname || target.user.globalName || data.username}`}`)
                        .setColor(0x5865F2)
                        .setDescription(
                            `> –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤: \`${data?.points || 0}\``
                        )
                        .setFooter({ text: message.client.constants.phrases.random() })
                        .setTimestamp()
                    ]
                });
                break;
            }
        }

        return;
    }
}

module.exports = PointsCommand;